import os
import json

def fuse_data_pipelines(comments_filepath: str, video_scripts_dir: str, output_filepath: str):
    """
    G·ªôp d·ªØ li·ªáu b√¨nh lu·∫≠n ƒë√£ nh√∫ng v√† d·ªØ li·ªáu script video ƒë√£ nh√∫ng th√†nh m·ªôt file JSON duy nh·∫•t.

    Args:
        comments_filepath (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file .jsonl ch·ª©a c√°c b√¨nh lu·∫≠n ƒë√£ nh√∫ng.
        video_scripts_dir (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a c√°c file JSON c·ªßa script video.
        output_filepath (str): ƒê∆∞·ªùng d·∫´n c·ªßa file JSON ƒë·∫ßu ra ch·ª©a d·ªØ li·ªáu g·ªôp.
    """
    print(f"\n===== B·∫Øt ƒë·∫ßu b∆∞·ªõc G·ªôp d·ªØ li·ªáu (Data Fusion) =====")

    # 1. ƒê·ªçc d·ªØ li·ªáu b√¨nh lu·∫≠n v√† nh√≥m theo video_id
    comments_by_video = {}
    try:
        with open(comments_filepath, 'r', encoding='utf-8') as f:
            for line in f:
                comment_data = json.loads(line)
                video_id = comment_data.get("video_id") # L·∫•y video_id t·ª´ comment
                if video_id:
                    if video_id not in comments_by_video:
                        comments_by_video[video_id] = []
                    comments_by_video[video_id].append(comment_data)
                else:
                    print(f"‚ö†Ô∏è B√¨nh lu·∫≠n kh√¥ng c√≥ video_id: {comment_data.get('original_text', comment_data.get('text'))[:50]}...")
        print(f"‚úÖ ƒê√£ ƒë·ªçc {sum(len(v) for v in comments_by_video.values())} b√¨nh lu·∫≠n t·ª´ {len(comments_by_video)} video.")
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file b√¨nh lu·∫≠n ƒë√£ nh√∫ng: {comments_filepath}")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå L·ªói gi·∫£i m√£ JSON trong file b√¨nh lu·∫≠n {comments_filepath}: {e}")
        return
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu b√¨nh lu·∫≠n: {e}")
        return

    # 2. ƒê·ªçc d·ªØ li·ªáu script video
    combined_data = []
    video_script_files = [f for f in os.listdir(video_scripts_dir) if f.endswith(".json")]
    print(f"üîé T√¨m th·∫•y {len(video_script_files)} file script video trong {video_scripts_dir}.")

    if not video_script_files:
        print("‚ö†Ô∏è Kh√¥ng c√≥ file script video n√†o ƒë·ªÉ g·ªôp.")
        return

    for filename in video_script_files:
        filepath = os.path.join(video_scripts_dir, filename)
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                script_data = json.load(f)
                script_video_id = script_data.get("video_id")

                if script_video_id:
                    # G√°n danh s√°ch b√¨nh lu·∫≠n v√†o tr∆∞·ªùng "comments" c·ªßa script
                    script_data["comments"] = comments_by_video.get(script_video_id, [])
                    if not script_data["comments"]:
                        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n n√†o cho video_id: {script_video_id}")
                    combined_data.append(script_data)
                else:
                    print(f"‚ö†Ô∏è File script {filename} kh√¥ng c√≥ video_id.")
        except json.JSONDecodeError as e:
            print(f"‚ùå L·ªói gi·∫£i m√£ JSON trong file script {filename}: {e}")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file script {filename}: {e}")

    # 3. L∆∞u d·ªØ li·ªáu g·ªôp
    output_dir = os.path.dirname(output_filepath)
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        with open(output_filepath, "w", encoding="utf-8") as f:
            json.dump(combined_data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ ƒê√£ g·ªôp th√†nh c√¥ng {len(combined_data)} video v√† b√¨nh lu·∫≠n li√™n quan v√†o: {output_filepath}")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file g·ªôp d·ªØ li·ªáu {output_filepath}: {e}")

    print(f"===== Ho√†n t·∫•t b∆∞·ªõc G·ªôp d·ªØ li·ªáu =====")